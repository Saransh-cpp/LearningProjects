import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; sym; trans; cong; cong₂; _≢_)
open import Data.Empty using (⊥; ⊥-elim)
open import Data.Nat using (ℕ; zero; suc; _+_; _*_)
open import Data.String using (String; _≟_)
open import Data.Product using (_×_; ∃; ∃-syntax) renaming (_,_ to ⟨_,_⟩)
open import Relation.Nullary using (¬_; Dec; yes; no)
open import Relation.Nullary.Decidable using (False; toWitnessFalse)

infix   4  _∋_⦂_
-- infix   4  _⊢_↑_
-- infix   4  _⊢_↓_
infixl  5  _,_⦂_

infixr  7  _⇒_

-- infix   5  ƛ_⇒_
-- infix   5  μ_⇒_
-- infix   6  _↑
-- infix   6  _↓_
-- infixl  7  _·_
-- infix   8  `suc_
-- infix   9  `_

Id : Set
Id = String

data Type : Set where
  `ℕ    : Type
  _⇒_   : Type → Type → Type

data Context : Set where
  ∅     : Context
  _,_⦂_ : Context → Id → Type → Context

data _∋_⦂_ : Context → Id → Type → Set where

  Z : ∀ {Γ x A}
      -----------------
    → Γ , x ⦂ A ∋ x ⦂ A

  S : ∀ {Γ x y A B}
    → x ≢ y
    → Γ ∋ x ⦂ A
      -----------------
    → Γ , y ⦂ B ∋ x ⦂ A

ext∋ : ∀ {Γ B x y}
  → x ≢ y
  → ¬ (∃[ A ] Γ ∋ x ⦂ A)
    ----------------------------
  → ¬ (∃[ A ] Γ , y ⦂ B ∋ x ⦂ A)
ext∋ x≢y _  ⟨ A , Z ⟩       =  x≢y refl
ext∋ _   ¬∃ ⟨ A , S _ ∋x ⟩  =  ¬∃ ⟨ A , ∋x ⟩

-- open import Data.Nat
-- open import Data.Rational
-- open import Data.Integer

-- x : ℕ
-- x = zero

-- y : ℚ
-- y = 0ℚ

-- z : ℤ
-- z = +0

-- open import Data.Nat.Show

-- open import Data.String

-- a : String
-- a = "Hello"

-- a !! 3
